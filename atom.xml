<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小棉袄</title>
  
  <subtitle>17724227330</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-11T03:19:53.307Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hzd</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js重点笔记(二)</title>
    <link href="http://yoursite.com/2018/12/10/js%E9%87%8D%E7%82%B9%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2018/12/10/js重点笔记(二)/</id>
    <published>2018-12-09T16:32:24.000Z</published>
    <updated>2018-12-11T03:19:53.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js重点笔记"><a href="#js重点笔记" class="headerlink" title="js重点笔记"></a>js重点笔记</h3><h3 id="第三章-基本概念"><a href="#第三章-基本概念" class="headerlink" title="第三章 基本概念"></a>第三章 基本概念</h3><hr><h4 id="amp-amp-操作符"><a href="#amp-amp-操作符" class="headerlink" title="&amp;&amp; 操作符"></a>&amp;&amp; 操作符</h4><blockquote><p>1.<code>&amp;&amp;</code> 操作符可以应用任何的数据类型，该操作符返回值<code>不一定是布尔值</code>。<br>2返回值的遵循规则：</p><ul><li>如果第一个操作数是对象，则返回第二个操作数</li><li>如果第二个操作数是对象，只有在第一个操作数位true 的情况下才会返回对象</li><li>两个操作数都为对象，返回第二个操作数</li><li>如果操作数中有一个为<code>null、undefined、NaN</code>时则同样返回<code>null 、undefined、NaN</code></li></ul></blockquote><blockquote><p>3.<code>重要细节</code>：&amp;&amp; 操作符属于短路操作，即如果第一个操作数能决定结果，就不会对第二个操作数求值</p></blockquote><h4 id="操作符"><a href="#操作符" class="headerlink" title="|| 操作符"></a>|| 操作符</h4><blockquote><p>1.<code>||</code>操作符同 <code>&amp;&amp;</code>一样一定返回布尔值<br>2.返回值遵循规则：</p><ul><li>若第一个操作数是对象，返回第一个操作数</li><li>若第一个操作数求值结果为false，返回第二个操作数</li><li>若两个操作数都是对象，则返回第一个操作数。</li><li>如果两个操作数都是<code>null、undefined、NaN</code>则返回<code>null undefined NaN</code><br>3.<code>重要细节</code>：|| 操作符属于<code>短路操作</code>，即如果第一个操作数能决定结果，就不会对第二个操作数求值<br>4.通过||操作符可以避免给变量赋null或undefined 值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = firstValue || backupValue;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h4 id="NaN-细节"><a href="#NaN-细节" class="headerlink" title="NaN 细节"></a>NaN 细节</h4><blockquote><p>1.NaN值参与的任何运算都等于NaN，包括加减乘除、关系操作、相等操作。<br>2.NaN不等于NaN</p></blockquote><h4 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h4><blockquote><p>1.<code>==/!=</code>先转换类型再比较<br>2.<code>===/!==</code>仅比较不转换<br>3.<strong>注：</strong>:<code>null == undefined</code>返回true 而 <code>null === iundefined</code> 返回false</p></blockquote><h4 id="switch-case"><a href="#switch-case" class="headerlink" title="switch - case"></a>switch - case</h4><blockquote><p>1.<code>switch()</code>可以使用任何数据类型<br>2.<code>case</code> 的值不一定是量 可以是变量可以是表达式。<br>3.<strong>注：</strong>.switch语句使用的是全等操作符比较，不会发生类型转换。</p></blockquote><h4 id="函数arguments"><a href="#函数arguments" class="headerlink" title="函数arguments"></a>函数arguments</h4><blockquote><p>1.函数可以传入任何数量的参数值，可以通过arguments 对象来访问这些参数。</p></blockquote><h3 id="第四章-变量-、作用域和内存问题"><a href="#第四章-变量-、作用域和内存问题" class="headerlink" title="第四章 变量 、作用域和内存问题"></a>第四章 变量 、作用域和内存问题</h3><hr><h4 id="基本数据类型-和-引用数据类型"><a href="#基本数据类型-和-引用数据类型" class="headerlink" title="基本数据类型 和 引用数据类型"></a>基本数据类型 和 引用数据类型</h4><blockquote><p>1.基本数据类型:<code>null\、undefined、String、Number、Boolean</code><br>2.引用数据类型：<code>{} 、[] 、/^$/、function</code><br>3.基本数据类型是<code>按值</code>访问、引用数据类型是按<code>引用[内存地址]</code>访问。<br>4.<strong>重要细节</strong>：函数的参数是<code>按值传递</code></p></blockquote><h4 id="检测基本数据类型"><a href="#检测基本数据类型" class="headerlink" title="检测基本数据类型"></a>检测基本数据类型</h4><blockquote><p>1.<strong>typeof</strong> 可以用于检测基本数据类型，但要主要的是，<code>typeof null</code> 返回的是object ;<br>2.<strong>instanceof</strong> 用于检测变量是否是给定引用类型的实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span></span><br><span class="line">  =&gt;<span class="literal">true</span></span><br><span class="line">(&#123;&#125;) <span class="keyword">instanceof</span> <span class="built_in">Object</span> </span><br><span class="line">  =&gt;<span class="literal">true</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><blockquote><p>1.在js中，没有块级作用域 ;</p></blockquote><h3 id="第五章-引用类型"><a href="#第五章-引用类型" class="headerlink" title="第五章 引用类型"></a>第五章 引用类型</h3><hr><h4 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h4><blockquote><p>1.创建对象细节key  - value 中key 是<code>字符串</code>类型的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj= &#123;</span><br><span class="line">name:<span class="string">"hzd"</span>,</span><br><span class="line">age:<span class="number">12</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array 对象"></a>Array 对象</h4><blockquote><p>1.可以通过设置数组length属性，从数组移除最后的元素或者为数组末尾添加新项。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.length -- ==&gt;删除数组末尾一项</span><br><span class="line"><span class="built_in">Array</span>[<span class="built_in">Array</span>.length] = x ; ==&gt;在数组末尾添加新项</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h5><blockquote><ul><li>instanceof  <code>Aryobj</code></li><li>Array.isArray (<code>Aryobj</code>)</li></ul></blockquote><h5 id="数组的转化字符串的方法"><a href="#数组的转化字符串的方法" class="headerlink" title="数组的转化字符串的方法"></a>数组的转化字符串的方法</h5><blockquote><ul><li>toLocaleString()</li><li>toString()</li><li>valueOf()</li><li>join()<br><em>注：所有对象都具有<code>toLocaleString()、toString() 、valueOf()</code>方法</em><br><code>tolocaleString() 方法主要是取得数组的每一项的值，并调用每一项的toString() 方法。</code></li></ul></blockquote><h5 id="数组的栈方法"><a href="#数组的栈方法" class="headerlink" title="数组的栈方法"></a>数组的栈方法</h5><blockquote><ul><li><p><code>ArrayObj.push()</code> 删除数组最后一项<br>参数：任意数量的参数,参数可以是任意类型<br>返回值：返回删除后数组的长度<br>原始数组发生改变</p></li><li><p><code>pop()</code> 在数组末尾添加一个元素<br>参数：无<br>返回值：返回被删除的数组元素<br>原始数组发生改变</p></li></ul></blockquote><h5 id="数组队列方法"><a href="#数组队列方法" class="headerlink" title="数组队列方法"></a>数组队列方法</h5><blockquote><p><strong>正向队列</strong></p><ul><li><code>shift()</code> 删除数组开头的一项<br>参数：无<br>返回值：返回被删除的元素<br>原始数组发生改变</li></ul><p><code>细节</code>使用shif()删除第一项之后，数组后面的每一项的 索引都向前进一位(数组每一项的索引都发生改变)</p></blockquote><blockquote><ul><li><code>push()</code> <em>同上</em></li></ul></blockquote><blockquote><p><strong>反向队列</strong></p></blockquote><blockquote><ul><li><p><code>unshift()</code> 在数组开头添加一个元素<br>参数：任意数量的参数，而且，参数可以是任意类型<br>返回值：返回修改后数组的新长度<br>原始数组发生改变</p></li><li><p><code>pop()</code>  <em>同上</em></p></li></ul></blockquote><h5 id="数组的排序方法"><a href="#数组的排序方法" class="headerlink" title="数组的排序方法"></a>数组的排序方法</h5><blockquote><ul><li><p><code>reverse()</code> 对数组中的元素进行反转<br>参数:无<br>返回值:返回反转后的数组<br>原始数组发生变化<br><img src="./1522652091889.png" alt="Alt text"></p></li><li><p><code>sort()</code> 对数组进行排序<br><em>注意：sort() 方法比较的是字符串</em><br>原始数组发生变化<br>sort() 可以接收一个比较函数作为参数，函数可以传入两个参数，如果第一个参数位于第二个参数之前返回负数，相等返回 0 ，之后返回正数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> ary =[<span class="number">23</span>,<span class="number">5</span>,<span class="number">67</span>,<span class="number">75</span>,<span class="number">352</span>,<span class="number">56</span>,<span class="number">653</span>];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">value1,value2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value1 - value2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(ary.sort(s));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h5 id="数组操作方法"><a href="#数组操作方法" class="headerlink" title="数组操作方法"></a>数组操作方法</h5><blockquote><ul><li><strong>concat()</strong> 基于当前数组连接一个或多个数组<br>参数：参数可以是一个或对个，参数可以任何数据类型的值，也可以是一个数组对象<br>返回值：返回修改后的数组<br><strong>原始数组不会受到影响，返回的是一个新的数组 。</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> newAry = ary.concat(<span class="number">4</span>,<span class="number">5</span>,[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]);</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p><em>细节：如果concat()方法不传入任何参数，返回一个和原始数组一样的新数组</em></p><ul><li><p><strong>slice(n,m)</strong> 从数组索引n开始截取到索引为m（不包含索引m的元素）并返回。<br>返回值：返回截取出来的数组<br><strong>原始数组不会收到影响</strong><br><em>细节 ：slice() 方法如果值传入参数n ,则返回从索引n到数组末尾的部分</em><br><em>不传入参数或者传入参数 0，则返回一个和原始数组一样的新数组，注意的是，数组是对象，返回的新数组虽然跟原始数组一样，但它不等于原始数组</em><br><em>slice() 支持传入负数参数，其计算方法：数组总长度+参数</em></p></li><li><p><strong>splice(n,m)</strong><br><code>splice(n,m)</code> 实现删除，从数组索引为n开始删除m项数组元素<br><code>splice(n,m,x1,x2...)</code>实现插入和替换，从数组索引为n开始删除m项，并且在数组索引n开始插入x1,x2…任意数量项（是在索引n的前面进行插入的）。<br>返回值：以数组形式返回被删除元素<br><em>细节splice()如果没有删除任何项则返回一个空数组</em></p></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;js重点笔记&quot;&gt;&lt;a href=&quot;#js重点笔记&quot; class=&quot;headerlink&quot; title=&quot;js重点笔记&quot;&gt;&lt;/a&gt;js重点笔记&lt;/h3&gt;&lt;h3 id=&quot;第三章-基本概念&quot;&gt;&lt;a href=&quot;#第三章-基本概念&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Diary" scheme="http://yoursite.com/categories/Diary/"/>
    
    
      <category term="javascrip" scheme="http://yoursite.com/tags/javascrip/"/>
    
  </entry>
  
  <entry>
    <title>js重点笔记(一)</title>
    <link href="http://yoursite.com/2018/12/09/js%E9%87%8D%E7%82%B9%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://yoursite.com/2018/12/09/js重点笔记(一)/</id>
    <published>2018-12-09T08:02:53.000Z</published>
    <updated>2018-12-11T03:16:33.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS要点（一）"><a href="#JS要点（一）" class="headerlink" title="JS要点（一）"></a>JS要点（一）</h3><blockquote><p>1.<strong><code>break 、return 、continue</code></strong> 不能出现在<strong><code>三目运算</code></strong>符里面，否则会报语法错误。<br>2.在三目运算符里面进行多个操作时，要把多个操作用<strong><code>括号</code></strong>括起来，操作语句之间用<code>逗号</code>分隔开。<br>3.在三目运算符中的执行部分如果不执行任何操作可用<strong><code>null 、void 0 、 undefine</code></strong>代替<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&lt;d ?  <span class="built_in">console</span>.log(<span class="string">"Hi!"</span>):<span class="literal">null</span>;</span><br><span class="line">a&lt;d ?  <span class="built_in">console</span>.log(<span class="string">"Hi!"</span>):<span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">a&lt;d ?  <span class="built_in">console</span>.log(<span class="string">"Hi!"</span>):undefine;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">4</span>,f=<span class="number">3</span>;</span><br><span class="line">a&lt;b?(alert(<span class="string">"hello word!"</span>),<span class="built_in">console</span>.log(<span class="string">"i am ok!"</span>)):<span class="literal">null</span>?</span><br></pre></td></tr></table></figure><blockquote><p>3.<strong><code>!!</code></strong>可以把任何非Boolean值转化为Boolean值，该用法相当于<strong><code>Boolean（）</code></strong><br>4.<strong><code>switch（）</code></strong>语句括号里面是一个<code>值</code>.case 语句后面也是一个<code>值</code>。每一个Case后面都一定要加上break，<strong><code>不加break不管后面的case的值是否成立都会被执行，直至遇到break为止</code></strong>。<br>5.<code>NaN</code>属于Number类型，NaN表示<code>not is number(不是一个数字)</code>，所以任何非Number都是一个NaN ,<code>NaN 不等于NaN，NaN不等于任何值</code><br>6.<code>continue</code>结束本轮循环，继续执行下一轮循环<br>7.<code>break</code> 结束整个循环。<br>8.javascript有五种基本的数据类型分别为：null、undefined、 Number、 String、 Boolean还有一种复杂的数据类型Object。<br>Null类型是一个空的对象指针，所以有<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>;  <span class="comment">//Object (null 是一个空的对象指针。)</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>9.当申明变量而没有赋值是，该变量默认就会存储<code>undefined</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 输出结果：undefined</span></span><br></pre></td></tr></table></figure></p></blockquote><p><img src="./1521806258631.png" alt="Alt text"></p><blockquote><p>10.通过标签、class获取元素返回的是一个集合，可以通过索引获取具体的元素。<br>11.注意，通过class、tag获取的DOM元素不能直接应<code>getElementBy****</code>等方法来获取他的子DOM的元素。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i  = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"Olist"</span>);</span><br><span class="line"><span class="keyword">var</span> j  = i.getElementsByTagName(<span class="string">'li'</span>); <span class="comment">//错误</span></span><br><span class="line"><span class="comment">//注意i是一个对象的集合，不可以直接通过的此种方法来获取他的子元素。</span></span><br></pre></td></tr></table></figure><p><img src="./1521968407098.png" alt="Alt text"></p><blockquote><p>12.创建函数时，所创建的函数体只有在执行的时候才是代码，在未执行的时候，储存在内存中是以字符串的形式存储的，并没有实际的意义。<br>13.选项卡实例代码(理解思想)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;div class=&quot;selectCard&quot;&gt;</span><br><span class="line">            &lt;ul id=&quot;Olist&quot;&gt;</span><br><span class="line">                &lt;li class=&quot;ils select&quot;&gt;选项卡一&lt;/li&gt;</span><br><span class="line">                &lt;li class=&quot;ils&quot;&gt;选项卡二&lt;/li&gt;</span><br><span class="line">                &lt;li class=&quot;ils&quot;&gt;选项卡三&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> i  = <span class="built_in">document</span>.getElementById(<span class="string">"Olist"</span>);</span><br><span class="line">    <span class="keyword">var</span> j  = i.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">exchange</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//初始化所有的li,把所有的li都恢复为被选中的状态</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i= <span class="number">0</span> ;i&lt; j.length; i++)&#123;</span><br><span class="line">            j[i].className= <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//让选中的li变为选中的状态的。</span></span><br><span class="line">        j[index].className = <span class="string">'select'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//为每个选项卡绑定一个点击事件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> z = <span class="number">0</span> ;z&lt;j.length;z++)&#123;</span><br><span class="line">        j[z].myid = z;   <span class="comment">//自定义属性，保存每个选在的索引值，以便在点击事件响应的时候可以传入exchange函数。</span></span><br><span class="line">        j[z].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            exchange(<span class="keyword">this</span>.myid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>13.变量的优化特别重要的深入点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//以一个例子来引出一个注意点,</span></span><br><span class="line">   <span class="comment">//对某个DOM元素的属性用一下语句进行优化</span></span><br><span class="line"><span class="keyword">var</span> bg = li[<span class="number">0</span>].style.backgroundColor;</span><br><span class="line">  <span class="comment">//对属性进行操作</span></span><br><span class="line">bg  = <span class="string">'red'</span>   ==&gt; 没有效果</span><br><span class="line">  <span class="comment">//该代码只是简单基本数据类赋值语句。发审变化只是bg这个变量的值发生的变化。并没有真正的改变DOM元素的backgroundColor属性的值。因为li[0].style.backgroundColor已经是一个确定的值而不是一个引用的数据类型了。</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>可以修改如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bg = li[<span class="number">0</span>].style</span><br><span class="line">bg.background = <span class="string">"red"</span> <span class="comment">//有效果</span></span><br></pre></td></tr></table></figure></p></blockquote><p><img src="./1521987450896.png" alt="Alt text"></p><blockquote><p>14.对变量的赋值时，要考虑所赋的值究竟是一个基本的数据类型还是一个引用类型。<br>15.<code>自定义属性思想</code>：当开发过程中，在某个阶段需要用到的一些信息，但是此时不好获取这些信息时，我们可以在之前好获取的阶段的时候，把这些后续需要用到的信息存储在元素对象的某一个自定义的属性上，以后想用的时候就直接在自定义的属性上获取这些信息。</p></blockquote><blockquote><p>16.<code>for in</code>循环的特点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"name"</span>,</span><br><span class="line"><span class="string">"age"</span> :<span class="string">"age"</span>,</span><br><span class="line"><span class="number">1</span>:<span class="string">"i am one"</span>,</span><br><span class="line"><span class="number">2</span>: <span class="string">"i am two"</span>,</span><br><span class="line"><span class="number">3</span>:<span class="string">"i am three"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>( key <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> key) <span class="comment">//输出 String</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj[key]) <span class="comment">//获取对象的属性值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在for in 循环中优先对数字属性进行遍历，并且进行排序。在对字符串属性遍历。</span></span><br><span class="line"><span class="comment">//for in 循环中key存储的类型是String类型。</span></span><br><span class="line"><span class="comment">//对象有多少键值对for in 就循环多少次（不确定）</span></span><br><span class="line"><span class="comment">//获取对象的属性的值用obj[key]</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="数据类型的转换汇总"><a href="#数据类型的转换汇总" class="headerlink" title="数据类型的转换汇总"></a>数据类型的转换汇总</h4><blockquote><p>知识点复习：js数据类型：基本数据类型、引用数据类型<br>基本数据类型：null 、undefined、Number、String、Boolean<br>引用数据类型：对象{}、数组[]、正则/^$/      （按引用地址访问）</p></blockquote><h4 id="其他类型转化为Number类型"><a href="#其他类型转化为Number类型" class="headerlink" title="其他类型转化为Number类型"></a>其他类型转化为Number类型</h4><blockquote><p>1.<strong><code>isNaN()</code>、<code>Number()</code> 、<code>parseInt()</code>、<code>parseFloat()</code></strong><br>2.进行加减乘除数字运算的时候<br>3.<code>&#39; &#39;</code>(空字符串)转换为数字为<code>0</code>，<code>null</code>转换为数字为<code>0</code><br>4.<code>undefined</code> 转换为数字为<code>NaN</code><br>5.{}、/^$/ 、function (){} 转换为数字都为NaN(<code>对象跟数字一点关系都没有</code>)<br>6.数组转化为数据类型</p><ul><li>先把数组调用toString()法转化为字符串</li><li>在把字符串调用Number()方法转化为数字</li></ul></blockquote><h4 id="js中的数学运算"><a href="#js中的数学运算" class="headerlink" title="js中的数学运算"></a>js中的数学运算</h4><blockquote><p>1.+ 、- 、*、/加减乘除 (先把其他非Number类型转换为Number类型在进行数学运算)`<br>2.除了+有特殊性外，其余的都为数学运算。</p><ul><li>+的特殊性：在遇到字符串时进行的不是数学运算而是字符串拼接运算</li><li>先是调用toString()方法转为字符串</li><li>在进行字符串拼接（其中特别要注意的对象调用toString（）不是把内容转化字符串而是转换[object Object]） <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(&#123;&#125;).toString();</span><br><span class="line"><span class="comment">// "[object Object]"</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><p><img src="./1522052579054.png" alt="Alt text"></p><h4 id="其他类型转化为Boolean类型"><a href="#其他类型转化为Boolean类型" class="headerlink" title="其他类型转化为Boolean类型"></a>其他类型转化为Boolean类型</h4><blockquote><p>1.以下条件会把其他数据类型转化为Boolean类型</p><ul><li><strong><code>Boolean() 、! 、!!</code></strong></li><li>在条件判断的时候if else 语句 、三目运算符…</li><li>注意：只有<strong>NaN 、null、 空字符串、 undefined、 0</strong> 转化为false 其他都转换为true</li><li>在使用<code>==</code>进行比较的时候，如果两边的操作数的类型不一致，浏览器会默认把两边的操作数转换相同的数据类型在进行比较。但是使用<code>===</code>则不会。</li></ul></blockquote><h4 id="各种数据类型的比较"><a href="#各种数据类型的比较" class="headerlink" title="各种数据类型的比较"></a>各种数据类型的比较</h4><blockquote><p>1.对象与对象的比较<strong><code>[] == []</code></strong>注意：对象跟对象比较的是内存空间的地址，不是内存空间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] == [] <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p></blockquote><p><img src="./1522054527011.png" alt="Alt text"></p><blockquote><p>2.对象和数字比较 <code>规律：把对象转化为数字在进行比较</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(&#123;&#125;) == <span class="literal">NaN</span> <span class="comment">// false </span></span><br><span class="line"><span class="literal">NaN</span> 不等于自身也不等于其他任何数据类型</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.对象与字符串进行比较<strong><code>规律：把两边都转换数字再进行比较</code></strong><br>5.字符串与数字比较 <strong><code>规律：把字符串转化为数字再进行比较</code></strong><br>6.字符串和布尔比较 <strong><code>规律：把两边都转化为数字再进行比较</code></strong><br>7.布尔与数字比较 <strong><code>规律：把布尔转为数字再进行比较</code></strong><br><strong>总规律：==的两边数据类型不一样时，都转为数字再进行比较。null和undefined除外</strong></p><ul><li><code>null == undefined //true</code></li><li><code>null === undefined //false</code></li><li><code>null == 0 --&gt;false</code></li><li><strong><code>null undefined 和其他任何值都不想等。</code></strong></li></ul></blockquote><h4 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h4><blockquote><p><code>console.dir(Math)</code> //输出Math对象的所有方法</p></blockquote><h6 id="Math对象常用的方法"><a href="#Math对象常用的方法" class="headerlink" title="Math对象常用的方法"></a>Math对象常用的方法</h6><blockquote><p>1.<code>abs()</code>//取绝对值<br>2.<code>ceil()</code>//向上取整<br>3.<code>floor()</code>//向下取整<br>4.<code>round()</code>//四舍五入 //负数5是向下的取整<br>5.<code>random()</code>//取0-1随机数<br>6.<code>max()</code> //获取最大值<br>7.<code>min()</code>//获取最小值<br>8.<code>PI</code> //一个属性，获取圆周率π<br>9.<code>pow()</code>//计算值多少次幂的值<br>10.<code>sqrt()</code>//开方</p></blockquote><h4 id="String-（字符串）对象"><a href="#String-（字符串）对象" class="headerlink" title="String （字符串）对象"></a>String （字符串）对象</h4><blockquote><p>1.输出String对象的常用的方法<code>console.dir(String.prototype)</code><br>2.String对象的<code>length属性</code> //返回字符串的长度<br>3.字符串也可以用索引获取字符串中的每一个字符，<code>如果指定的索引不存在，获取的结果是undefined</code></p></blockquote><h5 id="常用的字符串操作方法"><a href="#常用的字符串操作方法" class="headerlink" title="常用的字符串操作方法"></a>常用的字符串操作方法</h5><blockquote><p>1.<strong>stringObj.charAt()</strong> //获取某个索引的字符<br><strong><code>特别注意：如果括号中的索引超过字符串本身的长度返返回空字符串</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"I am red"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>)); <span class="comment">//输出I</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1000</span>)); <span class="comment">//输出" "</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.<strong>charCodeAt()</strong> //获取某个字符串中的某个索引的unicode编码（对应ASCII码）</p><ul><li>48-57 //0-9</li><li>65 - 90 //A-Z</li><li>97 - 122 //a-z<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"I am red"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">0</span>)); <span class="comment">//输出73</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><p><img src="./1522070066692.png" alt="Alt text"></p><blockquote><p>3.<strong>String.fromCharCode(十进制unnicode值)</strong> //把值按照ASCII表的信息，转化为原有的字符，和charCodeAt()正好对应</p></blockquote><h4 id="实现字符串截取的三个方法"><a href="#实现字符串截取的三个方法" class="headerlink" title="实现字符串截取的三个方法"></a>实现字符串截取的三个方法</h4><blockquote><p>4.<strong>substr(n,m)</strong>// 从索引n开始截取m个字符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> j = <span class="string">"adasfdsfljds dsf dsfsd"</span></span><br><span class="line">j.substr(<span class="number">4</span>,<span class="number">9</span>)</span><br><span class="line"><span class="comment">//"fdsfljds "</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>5.<strong>substring(n.m)</strong> //从索引n开始截取字符串到索引m为止<strong><code>(不包括m索引的字符)</code></strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> j = <span class="string">"adasfdsfljds dsf dsfsd"</span>;</span><br><span class="line">j.substring(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="string">"as"</span></span><br><span class="line">j.substring(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="string">"asf"</span></span><br></pre></td></tr></table></figure><blockquote><p>6.<strong>slice(n,m)</strong> //语法上和substring()一样，但，slice ()支持以负数为索引截取字符串。<br><code>当索引为负数的时候的计算规则：str.length+n --&gt; str.length+m</code>字符串总长度加上负数所索引。</p><ul><li><strong>细节：如果只传入n 相当于从索引n开始截取到字符串末尾</strong></li><li><strong>细节：如果传入索引超过最大的限制，也只能截取能截取的部分`</strong></li><li><strong>细节:如果没有传入任何参数的，把整个字符串进行截取，即返回整个字符串。</strong></li></ul><p>7.<strong>toUpperCase()</strong> //把字符串全部转化为大写<br>8.<strong>toLowerCase()</strong> //把字符串全部转化为小写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"asdsadsadsads"</span>.toUpperCase</span><br><span class="line">ƒ toUpperCase() &#123; [native code] &#125;</span><br><span class="line"><span class="string">"asdsadsadsads"</span>.toUpperCase()</span><br><span class="line"><span class="string">"ASDSADSADSADS"</span></span><br><span class="line"><span class="string">"DFGGFGFHGFHGF"</span>.toLowerCase()</span><br><span class="line"><span class="string">"dfggfgfhgfhgf"</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>9.<strong>string.indexOf()</strong>//获取某个字符在字符串的第一次出现的索引位置<br>10.<strong>stringObj.lastIndexOf()</strong> //获取某个字符在字符串中最后一次出现的索引位置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"qwedrv"</span>.lastIndexOf(<span class="string">"v"</span>)</span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="string">"i  am huangzhida"</span>.indexOf(<span class="string">"i"</span>)</span><br><span class="line"><span class="comment">//0</span></span><br><span class="line"><span class="string">"i  am huangzhida"</span>.lastIndexOf(<span class="string">"a"</span>)</span><br><span class="line"><span class="comment">//15</span></span><br></pre></td></tr></table></figure></p></blockquote><p><img src="./1522072500532.png" alt="Alt text"></p><blockquote><p><em>细节：如果当前字符在字符串没有出现过，结果返回 <strong><code>-1</code></strong>，可以用于检测某个字符串是否含有某个字符。</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测是否含有某个字符</span></span><br><span class="line"><span class="keyword">if</span>(stringObj.indexOf(<span class="string">"$char&amp;"</span>)===<span class="number">-1</span>)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"qwedrv"</span>.lastIndexOf(<span class="string">"v"</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="string">"i  am huangzhida"</span>.indexOf(<span class="string">"i"</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="string">"i  am huangzhida"</span>.lastIndexOf(<span class="string">"a"</span>)</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><blockquote><p>11.<strong>split()</strong> //将字符串按照某个字符符拆分成数组的某一项。和数组join()方法相反。<br><img src="./1522074825465.png" alt="Alt text"><br>12.<strong>replace(‘oldstr’,’newstr’)</strong> //把字符串中的某个字符串替换新的字符串。<br><strong><code>细节：执行一次replace只能替换一个，如果要替换多个的话需要循环多次。如果循环多次仍然无法替换的话则要配合使用正则表达式</code></strong><br>13.<strong>trimLeft()</strong>//去除字符串开始空格<br>14.<strong>trimRight()</strong>//去除字符串尾部空格<br>15.<strong>trim()</strong> //去除字符串首尾空格<br><img src="./1522076455829.png" alt="Alt text"><br><strong><code>细节：trim()兼容问题</code></strong></p></blockquote><hr><h4 id="案例：queryURLparrameter：获取地址栏的各个参数值"><a href="#案例：queryURLparrameter：获取地址栏的各个参数值" class="headerlink" title="案例：queryURLparrameter：获取地址栏的各个参数值"></a>案例：queryURLparrameter：获取地址栏的各个参数值</h4><blockquote><p><code>解决方案一</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">queryUrlParameter</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> urlobj =&#123;&#125;; <span class="comment">//保存获取到参数的各个变量的对象。</span></span><br><span class="line">   <span class="keyword">var</span> questionMarkIndex = url.indexOf(<span class="string">"?"</span>), <span class="comment">//获取'?'第一次出现的索引</span></span><br><span class="line">   <span class="comment">//处理地址栏没有'?'的情况</span></span><br><span class="line">   <span class="keyword">if</span>(questionMarkIndex === <span class="number">-1</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">   aimStr = url.substring(questionMarkIndex+<span class="number">1</span>); <span class="comment">//截取'?'后面的所有参数的字符串</span></span><br><span class="line">       <span class="keyword">var</span> urlAry = aimStr.split(<span class="string">"&amp;"</span>);                         <span class="comment">//将参数的字符串的按'&amp;'进行拆分成数组</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; urlAry.length; i++) &#123;              <span class="comment">//对各个参数的字符串元素在进行拆分成数组，并把数组的存入到urlobj对象中去</span></span><br><span class="line">           <span class="keyword">var</span> urlAim = urlAry[i].split(<span class="string">'='</span>);</span><br><span class="line">           urlobj[urlAim[<span class="number">0</span>]]= urlAim[<span class="number">1</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> urlobj;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>解决方案二</code>(使用正则表达式)<br><img src="./1522164019071.png" alt="Alt text"></p></blockquote><h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><blockquote><p>一、获取DOM元素的方法<br>1.<strong>document.getElementById()</strong>             <code>获取到的是一个元素</code><br>2.<strong>[context].getElementsByTagName()</strong> <code>元素集合</code><br>3.<strong>[context].getElementsByClassName()</strong> <code>元素集合</code><br>4.<strong>document.getElementsByName()</strong>      <code>节点集合</code><br>5.<strong>document.documentElement</strong>                              <code>获取HTML对象</code><br>6.<strong>document.Body</strong> <code>获取Body对象</code><br>7.<strong>document.head</strong><code>获取head对象</code><br>8.<strong>document.querySelector</strong> <code>一个元素对象</code><br>9.<strong>[context].querySelectorAll</strong> <code>获取元素集合</code></p></blockquote><hr><blockquote><p>1.document.getElementById();<br><code>注意：此方法只能通过document进行获取，不能通过上下文。</code><br><strong>△</strong> 一个html页面理论上的id是不能重复的。<br><strong><code>细节1</code></strong>：如果页面的id重复了，获取时只能获取页面的第一个id的标签。<br><strong><code>细节2</code></strong>：在IE7及更低版本的浏览器中会表单的name值当做Id来使用。<br><strong><code>细节</code></strong>：在js代码放在页面底下，可以直接通过的id的值获取这个元素，不需要通过document.getElementById()来获取。这种方式会页面所用同个id的元素都会获取到。<br><code>不推荐使用</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">"id3"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">"id2"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">"id3"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(id3);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><img src="./1522228850206.png" alt="Alt text"></p><hr><blockquote><p>2.[context].getElementsByTagName()  //获取的结果是一个元素的集合<br>该方法是在指定的上下文获取该其子子孙孙的某个标签的集合。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"p1"</span>&gt;&lt;/p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var divobj = document.getElementsByTagName('div'),</span></span><br><span class="line"><span class="regexp"> divobj.getElementsByClassName('p1');   =&gt;错误，divobj得到的是一个集合。不可以直接通过getElementsByClassName()方法获取子元素。</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>3.[context].getElementsByClassName()  //获取的结果是一个元素的集合</p><ul><li><code>上下文可以随意指定</code></li><li><code>获取的结果是一个元素的集合（类数组集合）</code></li><li><code>真是项目中，我们经常通过Class来获取元素</code></li><li><code>细节：在IE6-IE8是不兼容的 需要做兼容处理</code><br><img src="./1522240466555.png" alt="Alt text"></li></ul></blockquote><hr><blockquote><p>4.document.getElementsByName<br>a.获取到的是节点集合（nodelist）<br>b.上下文只能是document<br>c.IE浏览器只能识别表单元素name属性的值，一般用操作表单元素。</p></blockquote><hr><blockquote><ol start="5"><li>document.documentElement / document.Body;<br>a.获取HTML对象  / Body对象(一个元素对象)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clientWidth = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.Body.clientWidht</span><br><span class="line">=&gt; 获取屏幕可视区域的宽度 解决兼容问题</span><br><span class="line"> <span class="keyword">var</span> clientHeight = <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.Body.clientHeight</span><br><span class="line">=&gt; 获取屏幕可视区域的宽度</span><br></pre></td></tr></table></figure></li></ol></blockquote><hr><blockquote><p>6.document.querySelector() / [context].querySelectorAll() /</p><ul><li>前者获去一个元素对象或者获取一个对象的集合</li><li>获取到的是一个元素的集合</li><li>两者既可以通过标签获取ye<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">'div'</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h5 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h5><blockquote><p>节点：浏览器认为HTML页面中的所有内容都是节点。<code>标签、文本、注释等</code></p></blockquote><h5 id="常用节点"><a href="#常用节点" class="headerlink" title="常用节点"></a>常用节点</h5><blockquote><ul><li>元素节点</li><li>注释节点</li><li>文本节点</li><li>document节点<br><code>细节：大部分高版本浏览器会把</code><strong>换行 、空格</strong><code>当做是文本节点</code></li></ul></blockquote><p><strong><code>元素节点</code></strong></p><blockquote><p> nodeType : 1<br> nodeName : 大写的标签名（在大部分浏览器的怪异模式下我们小写的标签名，获取就是小写）<br> nodeValue:null</p></blockquote><blockquote><p>获取当前元素的标签名 [curEle].tagName<code>(获取的标签名一般都是大写)</code></p></blockquote><p><strong><code>文本节点</code></strong></p><blockquote><p>nodeType:3<br>nodeName :#text<br>nodeValue : 文本内容</p></blockquote><p><strong><code>注释节点</code></strong></p><blockquote><p>nodeType: 8<br>nodeName : #comment<br>nodeValue : 注释内容</p></blockquote><p><strong><code>文档节点</code></strong></p><blockquote><p>nodeType : 9<br>nodeName : #document<br>nodeValue :null</p></blockquote><h5 id="节点关系属性"><a href="#节点关系属性" class="headerlink" title="节点关系属性"></a>节点关系属性</h5><p>1.<strong><code>childNodes</code></strong></p><blockquote><p>获取当前元素的所有子节点（节点集合：类数组）<br>不仅仅是元素节点。文本节点、注释节点等都包括在内，子节点说明：只在儿子中查找。</p></blockquote><p>2.<strong><code>children</code></strong></p><blockquote><p>获取所有的元素子节点  <strong>元素集合</strong><br><strong>注</strong>: 在IE6-8下获取的结果和标准浏览器中有区别（会把注释节点当做元素节点获取）</p></blockquote><p>3.<strong><code>parentNode</code></strong></p><blockquote><p>获取当前元素的父节点，获取到是一个元素对象。</p></blockquote><p>4.<strong><code>previousSibling</code></strong></p><blockquote><p>获取当前节点的上一个兄弟节点。<strong>注:<code>不一定是元素节点，也可能是文本、注释节点</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"id1"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">"id2"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">"id3"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">"id4"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var id3 = document.getElementById('id3');</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ console.log(id3);</span></span><br><span class="line"><span class="regexp">    console.log(id3.nextSibling);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>5.<strong><code>nextSibling</code></strong></p><blockquote><p>获取当前元素的下一个兄弟节点。</p></blockquote><p>6.<strong><code>previousElementSibling /nextElementSibling</code> </strong></p><blockquote><p>获取当前元素的上一个兄弟<code>元素</code>节点以及获取当前元素的下一个兄弟节点</p><p><strong>注</strong>:在IE6-8 不兼容</p></blockquote><p>7.<strong><code>firstChild  / lastChild</code></strong></p><blockquote><p>firstChild: 获取当前元素所有节点的第一个节点<strong>（不一定是元素节点，可能是文本节点、注释节点）</strong><br>lastChild :获取当前元素所有节点的最后一个节点，<strong>不一定是元素节点，可能是文本节点或者是注释节点。</strong></p></blockquote><p>8.<strong><code>firstElementChild / lastElementChild</code></strong></p><blockquote><p><strong>注:在<code>IE6-8</code> 不兼容</strong></p></blockquote><hr><h5 id="创建和增加DOM"><a href="#创建和增加DOM" class="headerlink" title="创建和增加DOM"></a>创建和增加DOM</h5><p><code>document.createElement()</code> //创建一个元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)<span class="comment">//创建一个Div</span></span><br></pre></td></tr></table></figure></p><p><code>[content].appendChild()</code> //向某容器添加元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> odiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(odiv)</span><br></pre></td></tr></table></figure></p><p><code>insertBefore(newnode,aimnode)</code> //在容器子元素之前添加一个新的元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dd = <span class="built_in">document</span>.getElementById(<span class="string">'d_1'</span>),</span><br><span class="line">      parDiv  =dd.parentNode;</span><br><span class="line">  parDiv.insertBefore(pobj,dd);</span><br></pre></td></tr></table></figure></p><h5 id="案例：利用创建的元素的节点属性解析地址传入的参数"><a href="#案例：利用创建的元素的节点属性解析地址传入的参数" class="headerlink" title="案例：利用创建的元素的节点属性解析地址传入的参数"></a>案例：利用创建的元素的节点属性解析地址传入的参数</h5><blockquote><p>解决方案：<br>1.对地址进行截取拆分<br>2.利用正则表达式(上文有例子)<br>3.动态创建a标签，再通过标签的属性来获取去需要的部分</p><p>a标签的属性</p><ul><li><code>hash</code> :存储的是哈希值</li><li><code>hostname</code>：域名</li><li><code>protocol</code>：协议</li><li><code>search</code> ：问好传递的参数，没有传递任何参数则是空字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str_3=<span class="string">'http://www.ablesky.com/s/s.do?from=index&amp;aft=Course&amp;key=cxc'</span>;</span><br><span class="line">         <span class="comment">//创建一个a标签</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">queryURL</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">          link.href=url;</span><br><span class="line">          <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">          <span class="comment">// console.dir(link)</span></span><br><span class="line">          <span class="keyword">var</span> searchstr  =link.search;  <span class="comment">//获取a标签的search属性</span></span><br><span class="line">          <span class="keyword">if</span>(searchstr.length === <span class="number">0</span> )<span class="keyword">return</span> ;</span><br><span class="line"><span class="comment">/* 第二种解析思路</span></span><br><span class="line"><span class="comment">* var oary=searchstr.substring(1).split(/$|=/g);</span></span><br><span class="line"><span class="comment">* for(i= 0 ;i&lt;oary.length;i+=2)</span></span><br><span class="line"><span class="comment">* &#123;</span></span><br><span class="line"><span class="comment">*obj[oary[i]] = oary[i+1];</span></span><br><span class="line"><span class="comment">* &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">          <span class="keyword">var</span> ary = searchstr.substring(<span class="number">1</span>).split(<span class="string">'&amp;'</span>);<span class="comment">//对search属性进行截取以及拆分</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><br><span class="line">              ar = ary[i].split(<span class="string">'='</span>);</span><br><span class="line">              obj[ar[<span class="number">0</span>]]=ar[<span class="number">1</span>];</span><br><span class="line">                 &#125;</span><br><span class="line">          <span class="keyword">return</span> obj;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(queryURL(str_3));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">``` </span></span><br><span class="line"><span class="regexp">##### 修改删除克隆DOM元素</span></span><br><span class="line"><span class="regexp">&gt;容器.removeChild() /</span><span class="regexp">/移除当前元素中的子元素</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&gt;容器.replaceChild(newnode,oldnode)`/</span><span class="regexp">/替换当前元素中的某个子元素</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&gt;元素.cloneNode(false/</span><span class="literal">true</span>) <span class="comment">//克隆某一个元素，**`false：只克隆当前元素本身，true:深度克隆，把当前元素本身以及元素的所有后代进行克隆`** </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;**[set/get/remove]Attribute**</span><br><span class="line">&gt;</span><br><span class="line">&gt;[设置|获取|移除] 标签属性 (一般操作的是元素的自定属性)</span><br><span class="line">&gt;<span class="string">`极其重要知识点`</span>：利用setAttribute设置元素的属性和通过Obj.atrr = atrValue 设置元素属性的区别.</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="number">1.</span>node.setAttrbute 设置的属性会被当做标签属性处理，它所设置的属性会映射到页面结构标签的上，在标签内是可见。</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="number">2.</span>Obj.atrr = atrValue这种设置会把元素当做一个普通的对象，为其设置元素的内置属性。只有把元素的对像输出到控制台才可以看到。但它不会映射到标签上，即在标签上的不可见的。相对于标签是独立存在。</span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="number">3.</span>但是，要明白一点就是，通过setAttribute设置的属性是会映射到元素的内置属性中的。在控制台依然是查看到所设置的该属性</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="number">4.</span>通过setAttribute设置的属性也只能通过getAttribute来获取。换言之，getAttribute只能用来获取标签结构内部的属性。</span><br><span class="line"></span><br><span class="line">##### DOM 获取兄弟元素节点(兼容各个浏览器)</span><br><span class="line">##### 获取当前元素的上一兄弟`元素`节点</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">        /*</span></span><br><span class="line"><span class="string">        * 该方法主要是用于兼容各个浏览器获取当前元素的上一个兄弟元素节点。</span></span><br><span class="line"><span class="string">        * 思路：通节点关系属性的previousSibling(),循环获取当前元素的上一个兄弟节点，直至遇到该元素的上一个兄弟为</span></span><br><span class="line"><span class="string">        * 元素节点或者直至所有上一兄弟节点已经遍历完为止，停止获取并返回该元素节点。</span></span><br><span class="line"><span class="string">        * </span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string">    function prev(curELe)&#123;</span></span><br><span class="line"><span class="string">        var pre = curELe.previousSibling; //记录每次获取到的兄弟节点</span></span><br><span class="line"><span class="string">        while(pre &amp;&amp; pre.nodeType !== 1 )&#123;</span></span><br><span class="line"><span class="string">            pre = pre.previousSibling;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return pre;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 该方法主要是用于兼容各个浏览器获取当前元素的上一个兄弟元素节点。</span></span><br><span class="line"><span class="comment">        * 思路：通节点关系previousSibling属性,循环获取当前元素的上一个兄弟节点，直至遇到该元素的上一个兄弟为</span></span><br><span class="line"><span class="comment">        *       元素节点或者直至所有上一兄弟节点已经遍历完为止，停止获取并返回该元素节点。</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">prev</span>(<span class="params">curELe</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pre = curELe.previousSibling; <span class="comment">//记录每次获取到的兄弟节点</span></span><br><span class="line">        <span class="keyword">while</span>(pre &amp;&amp; pre.nodeType !== <span class="number">1</span> )&#123;</span><br><span class="line">            pre = pre.previousSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*该方法主要获取当前元素的下一个兄弟元素节点</span></span><br><span class="line"><span class="comment">    * 思路：通节点关系nextSibling属性,循环获取当前元素的上一个兄弟节点，直至遇到该元素的上一个兄弟为</span></span><br><span class="line"><span class="comment">    *       元素节点或者直至所有上一兄弟节点已经遍历完为止，停止获取并返回该元素节点。</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">curEle</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> next = curEle.nextSibling;</span><br><span class="line">        <span class="keyword">while</span>(next &amp;&amp; next.nodeType !== <span class="number">1</span>)&#123;</span><br><span class="line">                next = next.nextSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 该方法是获取当前元素的所有哥哥元素节点</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">preAll</span>(<span class="params">curEle</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> preAll = curEle.previousSibling,</span><br><span class="line">                preAry =[];                  <span class="comment">//存储获取到元素节点对象</span></span><br><span class="line">              <span class="keyword">while</span>(preAll)&#123;</span><br><span class="line">                  <span class="keyword">if</span>(preAll.nodeType === <span class="number">1</span>)&#123; preAry.push(preAll);&#125;</span><br><span class="line">                  preAll  = preAll.previousSibling;</span><br><span class="line">              &#125;</span><br><span class="line">           <span class="keyword">return</span> preAry;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 该方法是获取当前元素的所有弟弟元素节点</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">nextAll</span>(<span class="params">curEle</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nextAll = curEle.nextSibling,</span><br><span class="line">             nextAry = [];</span><br><span class="line">        <span class="keyword">while</span>(nextAll)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nextAll.nodeType === <span class="number">1</span>)&#123;nextAry.push(nextAll)&#125;</span><br><span class="line">            nextAll = nextAll.nextSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextAry;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">/* 该方法获取当前元素的所有兄弟元素节点</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">          * */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">siblings</span>(<span class="params">curEle</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> sli = [];</span><br><span class="line">            sli = preAll(curEle).concat(nextAll(curEle));</span><br><span class="line">            <span class="keyword">return</span> sli;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 该方法是获取当前元素的索引</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">myIndex</span>(<span class="params">curEle</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> indexEle = curEle.previousSibling</span><br><span class="line">                index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(indexEle)&#123;</span><br><span class="line">                <span class="keyword">if</span>(indexEle.nodeType === <span class="number">1</span>)&#123;index++;&#125;</span><br><span class="line">                indexEle = indexEle.previousSibling;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Date-对象的基础知识"><a href="#Date-对象的基础知识" class="headerlink" title="Date 对象的基础知识"></a>Date 对象的基础知识</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：</strong>：<code>new Date()</code>获取的是当前客户端的本机时间。<code>当前获取的时间不能作为重要的参考依据</code><br>new　Date() 获取的是一个日期对象</p></blockquote><hr><blockquote><p>1.myDate.getFullYear()   获取四位整数年</p><p>2.myDate.getMonth()  获取月份(0-11代表1-12月)</p><p>3.myDate.getDate()  获取日</p><p>4.myDate.getDay     获取星期(0-6代表周日到周六)</p><p>5.myDate.getHours() 获取小时</p></blockquote><blockquote><p>6.myDate.getMinutes() 获取分钟</p><p>7.myDate.getseconds() 获取秒数</p><p>8.myDate .getMilliseconds() 获取毫秒</p><p>9.myDate.getTime() 获取当前时间距离1970-01-01 00:00:00 的毫秒差</p><p><strong>注：</strong> new Date()可以用于转化为标准的时间对象格式，不传入参数时，则返回本机客户端的时间，当传入时间参数时，则返回转化为的时间格式化对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span><span class="number">-01</span><span class="number">-01</span> <span class="comment">//IE无法识别</span></span><br><span class="line"><span class="number">2017</span>/<span class="number">01</span>/<span class="number">02</span> <span class="comment">//</span></span><br><span class="line">时间戳  <span class="comment">//距离1970-01-01的时间戳，这里要注意的是，传入的时间戳必须是一个Number类型。不是字符串</span></span><br><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">78495749354394</span>);</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">#### 数组对象</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">&gt;数组也是对象类型的。</span></span><br><span class="line"><span class="string">&gt;**注：**类书组类似数组但它不是数组，</span></span><br><span class="line"><span class="string">&gt;1.通过getElementsByTagName获取的元素集合是类数组</span></span><br><span class="line"><span class="string">&gt;2.通过函数中的实参集合agruments也是类数组</span></span><br><span class="line"><span class="string">##### 循环数组</span></span><br><span class="line"><span class="string">##### for 循环数组</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;ary.length;i++)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ary[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="for-in-循环数组"><a href="#for-in-循环数组" class="headerlink" title="for in 循环数组"></a>for in 循环数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> ary)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ary[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="for循环和for-in-循环的区别"><a href="#for循环和for-in-循环的区别" class="headerlink" title="for循环和for in 循环的区别"></a>for循环和for in 循环的区别</h5><blockquote><p>for 循环只能遍历数组的一些私有的属性，而for in 循环可以把自定以的公共属性（原型属性）也能遍历到</p></blockquote><h5 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h5><blockquote><p>console.log(Array.prototype);<br>1.方法的意义和作用<br>2.方法的参数<br>3.方法的返回值<br>4.通过此方法，原来的数组发生改变<br><code>数组增加、修改、删除</code></p></blockquote><h5 id="数组的增加"><a href="#数组的增加" class="headerlink" title="数组的增加"></a>数组的增加</h5><p><code>Arrayobj.push()</code> 在数组的末尾追加新的一项</p><blockquote><p><code>细节</code>：该方法的参数可以一到多个，而且参数可以是任何数据类型<br>返回值：追加元素后数组的长度<br>原有的数组发生改变</p></blockquote><p><code>Arrayobj.unshift()</code> 向原有的数组的开头追加新的一项</p><blockquote><p><code>细节</code>：该方法的参数可以一到多个，而且参数可以是任何数据类型<br>返回值：追加后数组的长度<br>原有的数组发生改变</p></blockquote><p><code>把数组当做普通对象，使用键值对的操作，通过设置其属性来为数组增加新的元素</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary =[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">ary[ary.length] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><blockquote><p>原来的数字发生该改变</p></blockquote><h5 id="数组的删除"><a href="#数组的删除" class="headerlink" title="数组的删除"></a>数组的删除</h5><p><code>Arryobj.pop()</code> 删除数组的最后一项</p><blockquote><p>参数：该方法不支持传入参数<br>返回值：返回被删除的哪一项<br>原有的数组发生改变</p></blockquote><p><code>shift()</code> 删除数组开头的一项</p><blockquote><p>参数：该方法不需要传入参数<br>返回值：返回被删除的那一项<br>原有的数组发生改变<br><code>细节</code>使用shift删除第一项之后，数组后面的每一项的 索引都向前进一位(数组每一项的索引都发生改变)</p></blockquote><p><code>delete Arrayobj[i]</code></p><blockquote><p><code>细节</code>被删除后数组的其他项的索引不会改变，当前数组的length属性不会发生改变<br>array.length- - :通过此方法可以删除数组的最后的一项</p></blockquote><h5 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h5><blockquote><p><strong>方案一</strong>：双循环去重</p><p><em>思路：通过循环获取数组从索引0开始的每一个数组元素，然后通过循环把获取到的元素于数组后面的每一元素逐一比较，如果存在与当前相等的元素则把该元素删除</em><br><em>在删除元素时，可以通过数组方法splice()方法进行删除，但是，通过此方法删除会导致被删除元素后面的每一个元素都向前挪一位，产生<code>数组塌陷</code>。<code>数组塌陷导致每次删除数组元素由于元素前移使一个元素漏比较。</code></em><br><em>数组塌陷的解决思路，如何使数组元素被删除之后在其之后的项索引保持不变。</em> <code>可以把数组中最后一个元素与之替换在删除最后一个元素。</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myUnique = <span class="function"><span class="keyword">function</span> <span class="title">myUnique</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> cur  = <span class="keyword">this</span>[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i+<span class="number">1</span>; j &lt; <span class="keyword">this</span>.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>[i] === <span class="keyword">this</span>[j])&#123;</span><br><span class="line">                <span class="keyword">this</span>[j] = <span class="keyword">this</span>[<span class="keyword">this</span>.length <span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">this</span>[<span class="keyword">this</span>.length -- ];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>方案二</strong>：indexOf() 去重<br><em>思路：通过循环逐一获取数组的每一个元素，在通过slice()方法截取出当前元素之后的数组部分返回一个新的数组，并通过indexOf()在该新数组的里面查询是否包含当前元素</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">32</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.toUnique = <span class="function"><span class="keyword">function</span> <span class="title">toUnique</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> newAry = <span class="keyword">this</span>.slice(i+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// console.log(newAry);</span></span><br><span class="line">        <span class="keyword">if</span>(newAry.indexOf(<span class="keyword">this</span>[i]) &gt; <span class="number">-1</span>  )&#123;</span><br><span class="line">            <span class="keyword">this</span>[i] = <span class="keyword">this</span>[<span class="keyword">this</span>.length <span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">this</span>[<span class="keyword">this</span>.length -- ];</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>方案三</strong>：面向对象去重<br><em>思路：循环获取数组中每一个元素并不断在对象查询是否含有该属性值，如果含有则删删除当前元素，<code>注：删除元素会产生数组塌陷</code> 直至数组中的元素全部遍历完为止</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>];</span><br><span class="line"> <span class="built_in">Array</span>.prototype.myUni = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">         <span class="comment">// console.log(typeof obj[i]);</span></span><br><span class="line">         <span class="keyword">var</span> cur  = <span class="keyword">this</span>[i];</span><br><span class="line">         <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[cur] !== <span class="string">'undefined'</span> )&#123;</span><br><span class="line">             <span class="keyword">this</span>[i] = <span class="keyword">this</span>[<span class="keyword">this</span>.length <span class="number">-1</span>];</span><br><span class="line">             <span class="keyword">this</span>[<span class="keyword">this</span>.length -- ];</span><br><span class="line">             i --;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             obj[cur] = cur;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// console.log(obj);</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>方案四</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myU = <span class="function"><span class="keyword">function</span> <span class="title">myU</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> temp = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span>(temp.indexOf(<span class="keyword">this</span>[i]) &gt; <span class="number">-1</span> )&#123;</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          temp.push(<span class="keyword">this</span>[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> temp;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="js中的函数"><a href="#js中的函数" class="headerlink" title="js中的函数"></a>js中的函数</h4><h5 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnName</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*函数体*/</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fnName()</span><br></pre></td></tr></table></figure><h5 id="js函数的核心原理"><a href="#js函数的核心原理" class="headerlink" title="js函数的核心原理"></a>js函数的核心原理</h5><blockquote><p>1.函数是引用数据类型的一种，操作也是按引用地址来操作</p></blockquote><p><strong>创建函数</strong></p><blockquote><p>1.首先在当前的作用域中申明一个函数名（申明的函数名和使用var 申明的变量名是一样的操作：var sum和function sum 这连个名字算重复了）<br>2.浏览器首先开辟一个<strong><code>堆内存</code></strong>空间（分配一个十六进制的地址），把函数体的代码当做普通的字符串存储在堆内存空间中。<br><em>注：创建一个函数如果不执行在内存是以字符串形式存储的，并没有什么实际的意义</em><br>3.把堆内存的空间地址赋给之前申明的函数名</p></blockquote><p><strong>函数执行</strong></p><blockquote><p>函数执行的目的：把之前的存储的实现具体功能的js代码执行<br>1.函数执行，浏览器首先会该函数开辟一个新的私有作用域（栈内存），（只用来执行该函数中的函数体代码）<br>2.形参赋值<br>3.变量提升<br>4.把之前创建函数的存储在堆内存中的函数代码的拿到私有作用域中，把他们变为JS表达式从上到下执行<br>5.私有作用域是否销毁问题<br><img src="./1522997713001.png" alt="Alt text"><br>6.<strong><code>闭包</code></strong> 函数执行会形成一个私有的作用域，私有作用域的中私有变量和全局作用域的变量互不影响（全局作用域无法获取私有作用域的私有变量），私有作用域对私变量的这种保护机制称为 <code>闭包</code></p><p>栈内存 （作用域）：提供一个供js代码执行的环境<br>堆内存：所有的引用类型，他们所需要的内存都存储在堆内存空间中，（犹如一个仓库，主要作用是存储信息）</p><ul><li>把对象的键值对存储起来</li><li>函数中函数当做字符串存储起来</li></ul></blockquote><h5 id="函数中的形参和实参"><a href="#函数中的形参和实参" class="headerlink" title="函数中的形参和实参"></a>函数中的形参和实参</h5><blockquote><p>形参：提供一个执行函数为函数传入参数的一个入口；<br>实参：执行函数时，对形参赋于实际的值<br><em>注：如果未对函数的形参赋值，则未赋值的形参的值为undefined</em><br>函数的容错处理：在未给函数传入参数时。可能会导致内部处理出现形参的值为<code>undefined</code> 的情况，所以有必要做一些容错处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">value1, value2</span>)</span>&#123;</span><br><span class="line"><span class="comment">//容错处理1</span></span><br><span class="line"><span class="keyword">typeof</span> value1 == <span class="string">'undefined'</span> ? value1= <span class="number">0</span> :<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">typeof</span> value2 == <span class="string">'undefined'</span> ? value2= <span class="number">0</span> :<span class="literal">null</span>;</span><br><span class="line"><span class="comment">//容错处理2</span></span><br><span class="line">value1 = value1 || <span class="number">0</span>;</span><br><span class="line">value2 = value2 || <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(value1+value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="函数的arguments-实参集合"><a href="#函数的arguments-实参集合" class="headerlink" title="函数的arguments (实参集合)"></a>函数的arguments (实参集合)</h5><blockquote><p>1.当创建函数时，不可预先知道用户给函数传入多少个参数时，可以使用函数对象内置arguments对象来获取用户实际传入函数的参数集合<br>2.无论传入实参给函数与否，arguments对象是函数内置的.都存在函数的内部</p><ul><li>arguments是一个类数组</li><li>arguments以数字作为索引</li><li>arguments的<code>length</code>属性存储当前传入函数的实参的个数。</li><li>arguments.callee 存储当前函数本身</li><li>arguments.callee.caller 存储当前函数在那执行的（宿主函数），在全局环境执行时，该值为null。<br><em>注 :<code>arguments.callee、 arguments.callee.caller</code>在实际项目中很少使用，在<code>严格模式</code>不允许使用,大部分项目都是基于严格模式来的</em></li></ul><p>arguments 小案例：任意数求和</p></blockquote><h5 id="函数的返回值-return"><a href="#函数的返回值-return" class="headerlink" title="函数的返回值 return"></a>函数的返回值 return</h5><blockquote><p>1,return 是函数提供一个出口。通过return 可以返回一个私有属性供函数的外部使用<br><em>注意：return 返回是一个值</em><br>函数名fn（没有括号）代表是函数的本身，而fn() 执行函数并作为一个函数返回结果。<br><em>注：如果函数没有return返回值或者 return ; 默认返回undefined </em><br><em>在函数体中，遇到return 之后，后面的代码就不会执行了</em></p></blockquote><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><blockquote><p>匿名函数：没有的名字的函数</p><ul><li>函数表达式</li><li>自执行函数 <code>创建函数 立即执行函数</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">函数表达式</span><br><span class="line"><span class="keyword">var</span> odiv.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">自执行函数</span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"> </span>)</span>&#123; &#125;)( ) 一般在最前面加分好</span><br><span class="line">- <span class="function"><span class="keyword">function</span> (<span class="params">n</span>)</span>&#123;&#125;( <span class="number">10</span> )</span><br><span class="line">~ <span class="function"><span class="keyword">function</span> (<span class="params">n</span>)</span>&#123;&#125;( <span class="number">20</span> )</span><br></pre></td></tr></table></figure></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JS要点（一）&quot;&gt;&lt;a href=&quot;#JS要点（一）&quot; class=&quot;headerlink&quot; title=&quot;JS要点（一）&quot;&gt;&lt;/a&gt;JS要点（一）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.&lt;strong&gt;&lt;code&gt;break 、return 、contin
      
    
    </summary>
    
      <category term="Diary" scheme="http://yoursite.com/categories/Diary/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
</feed>
